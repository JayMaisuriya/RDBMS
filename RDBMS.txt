PR=8

CREATE TABLE std_rslt
(
 S_ID NUMBER (6) PRIMARY KEY,
 S_NAME VARCHAR2 (20) NOT NULL,
 T_MARKS NUMBER (5) NOT NULL,
 ADDRESS VARCHAR2 (20) NOT NULL 
);
DESC std_rslt;
INSERT INTO std_rslt VALUES (1,'JAY',88,'SACHIN');
INSERT INTO std_rslt VALUES (2,'AJAY',28,'SACHIN');
INSERT INTO std_rslt VALUES (3,'AKASH',68,'SACHIN');
INSERT INTO std_rslt VALUES (4,'YAGNESH',45,'SACHIN');
INSERT INTO std_rslt VALUES (5,'RAJ',66,'SACHIN');
INSERT INTO std_rslt VALUES (6,'RAVI',55,'VANZ');
INSERT INTO std_rslt VALUES (7,'VICKY',92,'MAROLI');
INSERT INTO std_rslt VALUES (8,'MAYUR',72,'SURAT');


SELECT * FROM std_rslt;
UPDATE std_rslt SET ADDRESS='NAVSARI' WHERE S_ID=5;

SELECT 
CASE
WHEN T_MARKS >=90 AND T_MARKS <=100 THEN 'A '
WHEN T_MARKS >=80 AND T_MARKS <=89  THEN 'B '
WHEN T_MARKS >=70 AND T_MARKS <=79  THEN 'C '
WHEN T_MARKS >=60 AND T_MARKS <=69  THEN 'D '
WHEN T_MARKS >=50 AND T_MARKS <=59  THEN 'E '
ELSE 'FAIL'
END AS RESULT,
MIN(T_MARKS) AS MINIMUMMARK,
MAX(T_MARKS) AS MAXIMUMMARK
FROM std_rslt
GROUP BY
CASE
WHEN T_MARKS >=90 AND T_MARKS <=100 THEN 'A '
WHEN T_MARKS >=80 AND T_MARKS <=89  THEN 'B '
WHEN T_MARKS >=70 AND T_MARKS <=79  THEN 'C '
WHEN T_MARKS >=60 AND T_MARKS <=69  THEN 'D '
WHEN T_MARKS >=50 AND T_MARKS <=59  THEN 'E '
ELSE 'FAIL'
END 

-------------------------------------------------------------------------------------------------------------------------------------------------------------
PR=13

CREATE VIEW STDVIEW
AS SELECT * FROM std_rslt;

SELECT * FROM STDVIEW;
SELECT * FROM std_rslt;


INSERT INTO STDVIEW VALUES(9,"OM",89,SACHIN);
UPDATE STDVIEW SET ADDRESS='SACHIN' WHERE S_ID=9;
DELETE FROM std_rslt WHERE S_ID=9;

CREATE VIEW STDVIEW1 
AS SELECT ADDRESS FROM std_rslt;

CREATE VIEW STDVIEW2
AS SELECT * FROM std_rslt WHERE S_ID=1;


DESC std_rslt;
ALTER TABLE std_rslt MODIFY (T_MARKS NUMBER(5) UNIQUE);

CREATE TABLE STD_BRANCH
(B_ID INT PRIMARY KEY, BRANCH VARCHAR(10), T_MARKS NUMBER(5) REFERENCES std_rslt(T_MARKS));

-------------------------------------------------------------------------------------------------------------------------------------------------------------


pr-14

SELECT * FROM employee;

create index indemp on employee(NAME);
select rowid,NAME from employee;
drop index indemp;

create sequence seqemp
start with 1
increment by 2
minvalue 1
maxvalue 20
nocycle
order;

select * from all_sequences;

drop sequence seqemp;

create synonym synemp for employee; 
select * from synemp;
drop synonym synemp;
-------------------------------------------------------------------------------------------------------------------------------------------------------------

PR-10

CREATE TABLE PRDCT
(ID NUMBER(5)PRIMARY KEY, P_NAME VARCHAR2(10) NOT NULL, S_NAME VARCHAR2(10), PRICE NUMBER(5) );

INSERT INTO PRDCT VALUES(100,'CAMERA','NIKON',300);
INSERT INTO PRDCT VALUES(101,'TELEVISION','ONIDA',100);
INSERT INTO PRDCT VALUES(102,'FRIDGE','VEDIOCON',150);


CREATE TABLE ORDER_ITEM(ORDER_ID NUMBER(10) NOT NULL, P_ID NUMBER(5) PRIMARY KEY, TOTAL_UNITS NUMBER(5), CUSTOMER VARCHAR2(10) );

INSERT INTO ORDER_ITEM VALUES(5100,104,30,'INFOSYS');
INSERT INTO ORDER_ITEM VALUES(5101,102,5,'SATYAM');
INSERT INTO ORDER_ITEM VALUES(5102,103,25,'WIPRO');
INSERT INTO ORDER_ITEM VALUES(5103,101,10,'TCS');

#CROSS JOIN
SELECT * FROM PRDCT P;
SELECT * FROM ORDER_ITEM O;
SELECT * FROM PRDCT P, ORDER_ITEM O;
SELECT P.ID,O.ORDER_ID FROM PRDCT P, ORDER_ITEM O;

#INNER JOIN
SELECT * FROM PRDCT P;
SELECT * FROM ORDER_ITEM O;
SELECT * FROM PRDCT P, ORDER_ITEM O WHERE P.ID=O.P_ID AND P.ID=101;

#OUTRE JOIN
SELECT * FROM PRDCT P, ORDER_ITEM O WHERE P.ID(+)=O.P_ID;


#SELF JOIN

CREATE TABLE STAFF_DETAILS
(STAFF_ID INT PRIMARY KEY, STAFF_NAME VARCHAR2(15) NOT NULL, STAFF_SALARY INT NOT NULL, STAFF_HEAD INT NOT NULL, DEPT_ID INT NOT NULL);

SELECT * FROM STAFF_DETAILS;

INSERT INTO STAFF_DETAILS VALUES(500,'NILESH',222222,501,1);
INSERT INTO STAFF_DETAILS VALUES(502,'CHINTAN',11000,500,2);
INSERT INTO STAFF_DETAILS VALUES(503,'VISHAL',11000,502,3);
INSERT INTO STAFF_DETAILS VALUES(504,'PAYAL',12000,503,4);
INSERT INTO STAFF_DETAILS VALUES(505,'SURESH',8000,504,3);
INSERT INTO STAFF_DETAILS VALUES(506,'MUKESH',12500,505,3);
INSERT INTO STAFF_DETAILS VALUES(507,'VIMAL',10000,506,2);


SELECT S1.STAFF_ID, S1.STAFF_NAME,S2.STAFF_NAME FROM STAFF_DETAILS S1,STAFF_DETAILS S2 WHERE S2.STAFF_ID=S1.STAFF_HEAD ORDER BY STAFF_ID;
\

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

PR15

---IF----ELSE---

DECLARE
   N NUMBER(10);
BEGIN
   N :=:N;
   IF MOD (N,2) = 0 THEN
     DBMS_OUTPUT.PUT_LINE('GIVEN NUMBER' || N || 'IS EVEN');
   ELSE
     DBMS_OUTPUT.PUT_LINE('GIVEN NUMBER' || N || 'IS ODD');
   END IF;
END;


---FOR----

DECLARE
  C NUMBER(10):=1;
BEGIN
  DBMS_OUTPUT.PUT_LINE('VALUE');
  FOR C IN 1..26
  LOOP
    DBMS_OUTPUT.PUT_LINE('  '||C  ) ; 
   END LOOP;
END;


--WHILE----

DECLARE
  C NUMBER(3):=1;
BEGIN
  DBMS_OUTPUT.PUT_LINE('VALUE ' || ' SQUARE');
  WHILE C<=5
  LOOP
    DBMS_OUTPUT.PUT_LINE('  '||C ||  '       ' || C*C);
    C:=C+1;
  END LOOP;
END;

---LOOP----

DECLARE
  C NUMBER(3):=1;
BEGIN
  DBMS_OUTPUT.PUT_LINE('VALUE ' || ' SQUARE');
  LOOP
    EXIT WHEN C>5;
    DBMS_OUTPUT.PUT_LINE('  '||C ||  '       ' || C*C*C);
    C:=C+1;
  END LOOP;
END;

-----goto-----------

BEGIN
  DBMS_OUTPUT.PUT_LINE('CODE START...');
  DBMS_OUTPUT.PUT_LINE('BEFORE GOTO STATEMENT...');
  GOTO JUMP;
    DBMS_OUTPUT.PUT_LINE('THIS STATEMENT WILL NOI GET EXECUTE...');
   <<JUMP>>DBMS_OUTPUT.PUT_LINE('THE FLOW OF EXECUTION JUMPED HERE...');
END;
  